from flask import Flask, request, jsonify, render_template, redirect, url_for,flash,session,send_from_directory
import stripe
from flask import send_file, abort
import io
from hdfs import InsecureClient
import requests
import os
# import logging
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy
from model.user import User
from model.UploadedFile import UploadedFile
from app import app,db,mail
from datetime import datetime
import qrcode
import urllib.parse
from flask_mail import Mail, Message

# HDFS_URL = "http://10.0.1.165:9870"  # ƒê·ªãa ch·ªâ HDFS c·ªßa b·∫°n
HDFS_URL="http://localhost:50070"
client = InsecureClient(HDFS_URL, user="hadoop")  # K·∫øt n·ªëi v·ªõi HDFS
stripe.api_key = "sk_test_51QupLVECybCxgSlYH1bkz4hOTGr4XOuWMxurrAyRJOJ5Zp1nz5uJt6p6ZFGHYv5HqoBqN64fkzmDr7HuHNtlc5VI00va8yTRqa"



# üìå API: ƒêƒÉng k√Ω ng∆∞·ªùi d√πng

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        try:
            email = request.form['email']
            password = request.form['password']
            confirm_password = request.form['confirm_password']
            user_type = int(request.form['user_type'])  # L·∫•y l·ª±a ch·ªçn ph√¢n lo·∫°i v√† chuy·ªÉn v·ªÅ ki·ªÉu int
            if not email or not password or not confirm_password:
                flash("Thi·∫øu email, password ho·∫∑c x√°c nh·∫≠n m·∫≠t kh·∫©u", "error")
                return redirect(url_for('register'))

            if password != confirm_password:
                flash("M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp.", "error")
                return redirect(url_for('register'))

            if User.query.filter_by(email=email).first():
                flash("Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω.", "error")
                return redirect(url_for('register'))

            password_hash = generate_password_hash(password)
            if user_type == 1:
                upload_limit = 1  # 1GB
            elif user_type == 2:
                upload_limit = 2 # 2GB
            elif user_type == 3:
                upload_limit = 3 # 3GB
            else:
                upload_limit = 0  # N·∫øu user_type kh√¥ng h·ª£p l·ªá

            # Th√™m ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu
            new_user = User(email=email, password_hash=password_hash, user_type=user_type,upload_limit=upload_limit)
            db.session.add(new_user)
            db.session.commit()
            user_type = request.form['user_type'] # L·∫•y l·ª±a ch·ªçn ph√¢n lo·∫°i v√† chuy·ªÉn v·ªÅ ki·ªÉu int

            # N·∫øu ng∆∞·ªùi d√πng ch·ªçn Option 2 (2GB) ho·∫∑c Option 3 (3GB), chuy·ªÉn sang trang thanh to√°n
            if user_type == '2':
                return redirect(url_for('payment', plan='2'))  # Option 2 - 10$/month
            elif user_type == '3':
                return redirect(url_for('payment', plan='3'))  # Option 3 - 18$/month

            flash(f"User {email} registered successfully!", "success")
            return redirect(url_for('login'))

        except Exception as e:
            flash(f"L·ªói server: {e}", "error")
            return redirect(url_for('register'))

    return render_template('register.html')
@app.route('/payment/<plan>', methods=['GET', 'POST'])
def payment(plan):
    plan_from_form = request.form.get('plan')
    if request.method == 'POST':
        plan_from_form = request.form.get('plan')

    if plan == '2':
        price_usd = 10  
        memo = "Thanh toan 2GB"
    elif plan == '3':
        price_usd = 18  
        memo = "Thanh toan goi 3GB"
    elif plan == '4':
        price_usd = 4  
        upload_limit = 4  # 0.5GB
        memo = "Thanh toan goi 4GB"
    elif plan == '5':
        price_usd = 5  
        upload_limit = 5  # 0.5GB
        memo = "Thanh toan goi 5GB"
    elif plan == '1':
        price_usd = 5  # 5$ cho Option 1 (1GB)
        memo = "Thanh toan goi 1GB"
    else:
        flash("Invalid plan selected", "error")
        return redirect(url_for('home'))

    price_vnd = 25000 * price_usd

    user_id = session.get('user_id')  

    if user_id:
        try:
            upload_limit=upload_limit/2
            user = User.query.get(user_id)
            user.upload_limit =user.upload_limit+ upload_limit   
            db.session.commit()  
        except Exception as e:
            flash(f"Error updating upload limit: {e}", "error")

    try:
        response = requests.post(
            "http://localhost:3001/generate_qr",
            json={"amount": price_vnd, "memo": memo}
        )
        result = response.json()
        qr_code_url = f"qr_codes/{result['filename']}"
    except Exception as e:
        flash(f"Kh√¥ng th·ªÉ t·∫°o m√£ QR: {e}", "error")
        qr_code_url = None

    return render_template(
        'payment.html',
        plan=plan,
        price=price_usd,
        price_vnd=price_vnd,
        memo=memo,
        qr_code_url=qr_code_url
    )


@app.route('/process_payment', methods=['POST'])
def process_payment():
    price = request.form['price']
    plan = request.form['plan']

    try:
        # X·ª≠ l√Ω thanh to√°n t·∫°i ƒë√¢y (v√≠ d·ª•, Stripe ho·∫∑c thanh to√°n tr·ª±c ti·∫øp qua VietQR)
        flash("Payment successful!", "success")
        return redirect(url_for('home'))  # Quay l·∫°i trang ch√≠nh sau khi thanh to√°n th√†nh c√¥ng

    except Exception as e:
        flash(f"Payment failed: {str(e)}", "error")
        return redirect(url_for('payment', plan=plan))  # N·∫øu c√≥ l·ªói, quay l·∫°i trang thanh to√°n

# üìå API: ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        # X·ª≠ l√Ω ƒëƒÉng nh·∫≠p khi ng∆∞·ªùi d√πng g·ª≠i form
        try:
            data = request.form  # L·∫•y d·ªØ li·ªáu t·ª´ form
            email = data.get('email')
            password = data.get('password')

            if not email or not password:
                return jsonify({"error": "Thi·∫øu email ho·∫∑c password"}), 400

            # Ki·ªÉm tra ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
            user = User.query.filter_by(email=email).first()
            if not user or not check_password_hash(user.password_hash, password):
                return jsonify({"error": "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng."}), 400
            session['user_id'] = user.id
            session['email'] = user.email  # L∆∞u email ng∆∞·ªùi d√πng v√†o session
            session['username'] = user.email.split('@')[0]  # L∆∞u t√™n ng∆∞·ªùi d√πng (c√≥ th·ªÉ l√† email tr∆∞·ªõc d·∫•u '@')
            session['upload_limit']=user.upload_limit
            # ƒêƒÉng nh·∫≠p th√†nh c√¥ng
            return redirect(url_for('home'))  # ƒê∆∞a ng∆∞·ªùi d√πng v·ªÅ trang ch·ªß sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng

        except Exception as e:
            return jsonify({"error": "L·ªói server"}), 500

    # N·∫øu l√† GET request, tr·∫£ v·ªÅ trang login
    return render_template('login.html')

import os

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    total_size = 0
    upload_limit = 0  # ƒê·∫£m b·∫£o upload_limit c√≥ gi√° tr·ªã h·ª£p l·ªá

    if request.method == 'POST':
        # Ki·ªÉm tra file ngay t·ª´ ƒë·∫ßu
        if 'file' not in request.files:
            flash('No file selected', 'error')
            return redirect(url_for('upload_file'))
            
        file = request.files['file']
        
        # Ki·ªÉm tra n·∫øu file kh√¥ng c√≥ ho·∫∑c kh√¥ng c√≥ t√™n
        if file.filename == '':
            flash('No selected file', 'error')
            return redirect(url_for('upload_file'))

        # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        user_id = session.get('user_id')
        if not user_id:
            flash("You must be logged in to upload a file.", "error")
            return redirect(url_for('login'))

        user_email = session.get('email')
        user = User.query.get(user_id)
        if not user:
            flash("User not found", "error")
            return redirect(url_for('upload_file'))

        # Ki·ªÉm tra file tr∆∞·ªõc khi ti·∫øn h√†nh l∆∞u
        print(f"Filename: {file.filename}")

        # ƒê·∫£m b·∫£o th∆∞ m·ª•c temp t·ªìn t·∫°i
        temp_folder = 'temp'
        if not os.path.exists(temp_folder):
            os.makedirs(temp_folder)  # T·∫°o th∆∞ m·ª•c temp n·∫øu ch∆∞a t·ªìn t·∫°i

        # L∆∞u t·∫°m th·ªùi file v√†o h·ªá th·ªëng
        file_path = os.path.join(temp_folder, file.filename)
        try:
            # L∆∞u file t·∫°m th·ªùi v√†o th∆∞ m·ª•c temp
            file.save(file_path)
            
            # L·∫•y k√≠ch th∆∞·ªõc file sau khi l∆∞u
            file_size = os.path.getsize(file_path)
            print(f"File size: {file_size} bytes")
        except Exception as e:
            flash(f"Error saving file: {str(e)}", "error")
            # X√≥a file t·∫°m th·ªùi n·∫øu l∆∞u kh√¥ng th√†nh c√¥ng
            if os.path.exists(file_path):
                os.remove(file_path)
            return redirect(url_for('upload_file'))

        upload_limit = float(session.get('upload_limit', 0)) * 1024 * 1024 * 1024
        
        # L·∫•y danh s√°ch file v√† t√≠nh t·ªïng dung l∆∞·ª£ng HI·ªÜN C√ì
        files = get_user_files(user_email)
        current_total_size = sum(file['size'] for file in files)

        # KI·ªÇM TRA DUNG L∆Ø·ª¢NG TR∆Ø·ªöC KHI UPLOAD
        if (current_total_size + file_size) > upload_limit:
            flash(f"Error: Exceeded storage limit. You can only upload {upload_limit // (1024*1024*1024)}GB total.", "error")
            # X√≥a file t·∫°m th·ªùi n·∫øu v∆∞·ª£t qu√° gi·ªõi h·∫°n
            if os.path.exists(file_path):
                os.remove(file_path)
            return redirect(url_for('upload_file'))

        # Ki·ªÉm tra dung l∆∞·ª£ng c√≤n l·∫°i d∆∞·ªõi 100MB (sau khi ƒë√£ ki·ªÉm tra v∆∞·ª£t gi·ªõi h·∫°n)
        remaining_size = upload_limit - (current_total_size + file_size)
        print(f"Remaining size: {remaining_size} bytes")
        if remaining_size < 100 * 1024 * 1024:
            try:
                msg = Message("Warning: Low Storage", recipients=[user.email])
                msg.body = f"Dear {user.email},\n\nYour storage is almost full. You have less than 100MB remaining. Please upgrade your storage plan."
                mail.send(msg)
            except Exception as e:
                print(f"Email warning failed: {str(e)}")

        # Ti·∫øn h√†nh upload file l√™n HDFS
        user_folder = f"/user/hadoop/{user_email}"
        hdfs_path = f"{user_folder}/{file.filename}"

        try:
            client.makedirs(user_folder)
            with client.write(hdfs_path, overwrite=True) as writer:
                with open(file_path, 'rb') as f:  # M·ªü file ƒë√£ l∆∞u ƒë·ªÉ ghi v√†o HDFS
                    writer.write(f.read())

            file_info = client.status(hdfs_path)
            uploaded_file_size = file_info['length']

            uploaded_file = UploadedFile(
                filename=file.filename, 
                file_size=uploaded_file_size, 
                upload_time=datetime.now(), 
                user_id=user_id
            )
            uploaded_file.save()

            flash(f"File {file.filename} uploaded successfully! Size: {uploaded_file_size} bytes", "success")
        except Exception as e:
            flash(f"Upload failed: {str(e)}", "error")
        
        # X√≥a file t·∫°m th·ªùi sau khi upload th√†nh c√¥ng
        if os.path.exists(file_path):
            os.remove(file_path)

        return redirect(url_for('upload_file'))

    # X·ª≠ l√Ω GET request
    user_email = session.get('email')
    files = get_user_files(user_email) if user_email else []
    total_size = sum(file['size'] for file in files)
    upload_limit = float(session.get('upload_limit', 0)) * 1024 * 1024 * 1024
    
    return render_template('upload.html', 
        total_size=total_size, 
        upload_limit=upload_limit, 
        convert_bytes=convert_bytes
    )


from datetime import datetime

def get_user_files(user_email):
    # ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c c·ªßa ng∆∞·ªùi d√πng
    user_folder = f"/user/hadoop/{user_email}"  # ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ng∆∞·ªùi d√πng
    try:
        # L·∫•y danh s√°ch c√°c t·ªáp trong th∆∞ m·ª•c ng∆∞·ªùi d√πng
        files = client.list(user_folder)
        
        # Get file details (size and upload time)
        detailed_files = []
        for file in files:
            file_path = f"{user_folder}/{file}"
            file_size = client.status(file_path)['length']  # Get file size
             # L·∫•y th·ªùi gian s·ª≠a ƒë·ªïi (modification time) t·ª´ HDFS
            modification_time = client.status(file_path)['modificationTime']  # Th·ªùi gian s·ª≠a ƒë·ªïi (timestamp)
            # Chuy·ªÉn timestamp th√†nh ƒë·ªãnh d·∫°ng ng√†y gi·ªù
            upload_time = datetime.fromtimestamp(modification_time / 1000).strftime('%Y-%m-%d %H:%M:%S')  # Chuy·ªÉn t·ª´ milliseconds sang gi√¢y
            detailed_files.append({
                'name': file,
                'size': file_size,
                'upload_time': upload_time
            })
        return detailed_files
    except Exception as e:
        print(f"Error fetching files for {user_email}: {e}")
        return []

@app.route('/security_storage')
def security_storage():
    if not session.get('user_id'):
        return redirect(url_for('login'))  # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a

    user_email = session.get('email')  # L·∫•y email c·ªßa ng∆∞·ªùi d√πng t·ª´ session
    files = get_user_files(user_email)  # L·∫•y danh s√°ch c√°c t·ªáp t·ª´ Hadoop
    # T√≠nh t·ªïng dung l∆∞·ª£ng ƒë√£ s·ª≠ d·ª•ng
    total_size = sum(file['size'] for file in files)
    user_id = session.get('user_id')  # L·∫•y user_id t·ª´ session ƒë·ªÉ truy xu·∫•t ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
    user = User.query.get(user_id)  # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ c∆° s·ªü d·ªØ li·ªáu theo user_id
    upload_limit = user.upload_limit  # L·∫•y upload_limit t·ª´ c∆° s·ªü d·ªØ li·ªáu
    max_size = float(upload_limit) * 1024 * 1024 * 1024  # Chuy·ªÉn ƒë·ªïi GB sang bytes

    return render_template('security_storage.html', files=files, convert_bytes=convert_bytes, total_size=total_size, max_size=max_size)



@app.route('/download_file/<filename>')
def download_file(filename):
    user_email = session.get('email')  # L·∫•y email ng∆∞·ªùi d√πng t·ª´ session
    user_folder = f"/user/hadoop/{user_email}"  # Th∆∞ m·ª•c ng∆∞·ªùi d√πng trong HDFS

    try:
        # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫øn file trong HDFS
        file_path = f"{user_folder}/{filename}"

        # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i trong HDFS kh√¥ng
        if client.status(file_path, strict=False):  # strict=False s·∫Ω kh√¥ng raise l·ªói n·∫øu file kh√¥ng t·ªìn t·∫°i
            # ƒê·ªçc file t·ª´ HDFS d∆∞·ªõi d·∫°ng nh·ªã ph√¢n
            with client.read(file_path, encoding=None) as reader:  # Kh√¥ng gi·∫£i m√£ d·ªØ li·ªáu, tr·∫£ v·ªÅ byte stream
                # Chuy·ªÉn d·ªØ li·ªáu th√†nh m·ªôt ƒë·ªëi t∆∞·ª£ng BytesIO ƒë·ªÉ Flask c√≥ th·ªÉ g·ª≠i n√≥
                file_data = io.BytesIO(reader.read())  # Chuy·ªÉn d·ªØ li·ªáu th√†nh ƒë·ªëi t∆∞·ª£ng BytesIO

                # Tr·∫£ v·ªÅ file d∆∞·ªõi d·∫°ng download
                file_data.seek(0)  # ƒê·∫£m b·∫£o v·ªã tr√≠ ƒë·ªçc b·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu file
                return send_file(file_data, download_name=filename, as_attachment=True)
        else:
            return f"File {filename} not found", 404  # N·∫øu file kh√¥ng t·ªìn t·∫°i, tr·∫£ l·ªói 404
    except Exception as e:
        print(f"Error downloading file {filename}: {e}")
        return f"Error downloading file {filename}", 500  # Tr·∫£ l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ


def convert_bytes(size_in_bytes):
    if size_in_bytes >= 1024 * 1024 * 1024:  # Ki·ªÉm tra GB
        size_in_gb = size_in_bytes / (1024 * 1024 * 1024)
        return f"{size_in_gb:.2f} GB"
    elif size_in_bytes >= 1024 * 1024:  # Ki·ªÉm tra MB
        size_in_mb = size_in_bytes / (1024 * 1024)
        return f"{size_in_mb:.2f} MB"
    elif size_in_bytes >= 1024:  # Ki·ªÉm tra KB
        size_in_kb = size_in_bytes / 1024
        return f"{size_in_kb:.2f} KB"
    else:  # Ki·ªÉm tra Byte
        return f"{size_in_bytes} bytes"


    
@app.route('/delete_file/<filename>', methods=['POST'])
def delete_file(filename):
    print(f"Method for deleting file {filename}: {request.method}")  # In ra ph∆∞∆°ng th·ª©c request
    if request.method != 'POST':
        flash(f"Method {request.method} not allowed.", "error")
        return redirect(url_for('security_storage'))  # Quay l·∫°i trang n·∫øu ph∆∞∆°ng th·ª©c kh√¥ng h·ª£p l·ªá

    user_email = session.get('email')
    user_folder = f"/user/hadoop/{user_email}"

    try:
        # Xo√° t·ªáp t·ª´ HDFS
        client.delete(f"{user_folder}/{filename}")
        flash(f"File {filename} deleted successfully!", "success")
        return redirect(url_for('security_storage'))  # Quay l·∫°i trang sau khi xo√° t·ªáp
    except Exception as e:
        flash(f"Error deleting file {filename}: {e}", "error")
        return redirect(url_for('security_storage'))  # Quay l·∫°i trang n·∫øu c√≥ l·ªói


@app.route('/')
def home():
    with app.app_context():
        db.create_all()
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng admin ƒë√£ t·ªìn t·∫°i ch∆∞a
    admin_user = User.query.filter_by(email='admin@example.com').first()

    if not admin_user:
        # N·∫øu kh√¥ng t·ªìn t·∫°i, t·∫°o t√†i kho·∫£n admin m·ªõi
        admin_user = User(email='admin@example.com')
        admin_user.set_password('123')  # M√£ h√≥a m·∫≠t kh·∫©u '123'

        db.session.add(admin_user)
        db.session.commit()

        print("Admin account created successfully!")
    else:
        print("Admin account already exists.")
    if 'user_id' in session:
        username = session.get('username')  # L·∫•y t√™n ng∆∞·ªùi d√πng t·ª´ session
    else:
        username = None  # N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, kh√¥ng c√≥ t√™n ng∆∞·ªùi d√πng
    return render_template('index.html')
@app.route('/logout')
def logout():
    session.pop('user_id', None)
    session.pop('email', None)
    session.pop('username', None)
    flash("You have been logged out.", "info")
    return redirect(url_for('login'))


@app.route('/data', methods=['GET', 'POST'])
def data():
    if not session.get('user_id'):
        return redirect(url_for('login'))  # N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p

    user_id = session.get('user_id')
    user = User.query.get(user_id)  # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ database
    

    return render_template('data.html', user=user, convert_bytes=convert_bytes)


@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/service')
def service():
    return render_template('service.html')

@app.route('/why')
def why():
    return render_template('why.html')

@app.route('/team')
def team():
    return render_template('team.html')

if __name__ == '__main__':
    app.run(debug=True)  # Cho ph√©p truy c·∫≠p t·ª´ b√™n ngo√†i