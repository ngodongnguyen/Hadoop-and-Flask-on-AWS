from flask import Flask, request, jsonify, render_template, redirect, url_for,flash
import stripe
from hdfs import InsecureClient
import os
import logging
from werkzeug.security import generate_password_hash, check_password_hash
from flask_sqlalchemy import SQLAlchemy
from model import User
from app import app,db,hdfs_client


# Kh·ªüi t·∫°o th∆∞ m·ª•c t·∫£i l√™n (Local)
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER


# üìå API: ƒêƒÉng k√Ω ng∆∞·ªùi d√πng

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        try:
            email = request.form['email']
            password = request.form['password']
            confirm_password = request.form['confirm_password']

            if not email or not password or not confirm_password:
                flash("Thi·∫øu email, password ho·∫∑c x√°c nh·∫≠n m·∫≠t kh·∫©u", "error")
                return redirect(url_for('register'))

            # Ki·ªÉm tra xem m·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u c√≥ kh·ªõp kh√¥ng
            if password != confirm_password:
                flash("M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp.", "error")
                return redirect(url_for('register'))

            # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i
            if User.query.filter_by(email=email).first():
                flash("Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω.", "error")
                return redirect(url_for('register'))

            # M√£ h√≥a m·∫≠t kh·∫©u
            password_hash = generate_password_hash(password)

            # Th√™m ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu
            new_user = User(email=email, password_hash=password_hash)
            db.session.add(new_user)
            db.session.commit()

            flash(f"User {email} registered successfully!", "success")
            return redirect(url_for('login'))  # Redirect to login page

        except Exception as e:
            flash(f"L·ªói server: {e}", "error")
            return redirect(url_for('register'))

    return render_template('register.html')


# üìå API: ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        # X·ª≠ l√Ω ƒëƒÉng nh·∫≠p khi ng∆∞·ªùi d√πng g·ª≠i form
        try:
            data = request.form  # L·∫•y d·ªØ li·ªáu t·ª´ form
            email = data.get('email')
            password = data.get('password')

            if not email or not password:
                return jsonify({"error": "Thi·∫øu email ho·∫∑c password"}), 400

            # Ki·ªÉm tra ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
            user = User.query.filter_by(email=email).first()
            if not user or not check_password_hash(user.password_hash, password):
                return jsonify({"error": "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng."}), 400

            # ƒêƒÉng nh·∫≠p th√†nh c√¥ng
            return redirect(url_for('home'))  # ƒê∆∞a ng∆∞·ªùi d√πng v·ªÅ trang ch·ªß sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng

        except Exception as e:
            logging.error(f"‚ùå L·ªói trong /login: {e}")
            return jsonify({"error": "L·ªói server"}), 500

    # N·∫øu l√† GET request, tr·∫£ v·ªÅ trang login
    return render_template('login.html')

# üìå API: Upload file l√™n HDFS
@app.route('/upload', methods=['POST'])
def upload_file():
    try:
        file = request.files.get('file')

        if not file:
            logging.error("‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n.")
            return jsonify({"error": "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n"}), 400

        # L∆∞u file v√†o th∆∞ m·ª•c local
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(file_path)
        logging.info(f"üìÇ File {file.filename} ƒë√£ l∆∞u v√†o local: {file_path}")

        # T·∫£i l√™n HDFS
        remote_path = f'/user/hadoop/{file.filename}'
        try:
            with open(file_path, 'rb') as local_file:
                with hdfs_client.write(remote_path, overwrite=True) as hdfs_file:
                    hdfs_file.write(local_file.read())

            logging.info(f"‚úÖ File {file.filename} ƒë√£ t·∫£i l√™n HDFS th√†nh c√¥ng: {remote_path}")
            return jsonify({"message": "File uploaded to HDFS successfully!", "hdfs_path": remote_path}), 200
        except Exception as e:
            logging.error(f"‚ùå L·ªói khi l∆∞u file v√†o HDFS: {e}")
            return jsonify({"error": f"L·ªói khi l∆∞u file v√†o HDFS: {str(e)}"}), 500

    except Exception as e:
        logging.error(f"‚ùå L·ªói trong /upload: {e}")
        return jsonify({"error": f"L·ªói server: {str(e)}"}), 500
# üìå API: Xem danh s√°ch c√°c t·ªáp ƒë√£ t·∫£i l√™n HDFS
@app.route('/list_files', methods=['GET'])
def list_files():
    try:
        file_list = hdfs_client.list('/user/hadoop/')
        return jsonify({"files": file_list}), 200
    except Exception as e:
        logging.error(f"‚ùå L·ªói khi l·∫•y danh s√°ch t·ªáp: {e}")
        return jsonify({"error": "L·ªói server khi l·∫•y danh s√°ch t·ªáp."}), 500
    # üìå API: Thanh to√°n qua Stripe
@app.route('/pay', methods=['POST'])
def pay():
    try:
        data = request.get_json()
        amount = data.get('amount')  # S·ªë ti·ªÅn c·∫ßn thanh to√°n

        if not amount:
            return jsonify({"error": "Thi·∫øu s·ªë ti·ªÅn thanh to√°n"}), 400

        # T·∫°o m·ªôt phi√™n thanh to√°n Stripe
        session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'product_data': {
                        'name': 'Sample Payment',
                    },
                    'unit_amount': amount * 100,  # Stripe y√™u c·∫ßu s·ªë ti·ªÅn t√≠nh b·∫±ng cent
                },
                'quantity': 1,
            }],
            mode='payment',
            success_url=request.host_url + 'payment_success',
            cancel_url=request.host_url + 'payment_cancel',
        )

        return jsonify({"session_url": session.url}), 200
    except Exception as e:
        logging.error(f"‚ùå L·ªói trong /pay: {e}")
        return jsonify({"error": "L·ªói thanh to√°n"}), 500


@app.route('/payment_success')
def payment_success():
    return "Thanh to√°n th√†nh c√¥ng! C·∫£m ∆°n b·∫°n."

@app.route('/payment_cancel')
def payment_cancel():
    return "Thanh to√°n b·ªã h·ªßy. Vui l√≤ng th·ª≠ l·∫°i."

@app.route('/')
def home():
    with app.app_context():
        db.create_all()
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng admin ƒë√£ t·ªìn t·∫°i ch∆∞a
    admin_user = User.query.filter_by(email='admin@example.com').first()

    if not admin_user:
        # N·∫øu kh√¥ng t·ªìn t·∫°i, t·∫°o t√†i kho·∫£n admin m·ªõi
        admin_user = User(email='admin@example.com')
        admin_user.set_password('123')  # M√£ h√≥a m·∫≠t kh·∫©u '123'
        
        db.session.add(admin_user)
        db.session.commit()

        print("Admin account created successfully!")
    else:
        print("Admin account already exists.")
    return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/service')
def service():
    return render_template('service.html')

@app.route('/why')
def why():
    return render_template('why.html')

@app.route('/team')
def team():
    return render_template('team.html')

if __name__ == '__main__':
    app.run(debug=True)  # Cho ph√©p truy c·∫≠p t·ª´ b√™n ngo√†i